print("Hello World!")
print("Hello World!")
clear
cls
setwd("~/My Work/ML in R/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 6 - Polynomial Regression")
### Data preprocessing
## Import dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
# We are not going to slitt dataset due to small number of observasions
# ## Split dataset to train and test
#
# # Need a new package caTools
# # install.packages('caTools')
#
# library(caTools) #using this we can import caTools directly
#
# # In python random_state, in R it is seed
# set.seed(123)
# split = sample.split(dataset$Purchased, SplitRatio = 0.8) # SplitRatio is train set ratio oposite of python, This returns True - decide to goto train/ False- goto test set
#
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# ## Feature scaling
# # Facot is not numeric
# training_set[, 2:3] = scale(training_set[, 2:3])
# test_set[, 2:3] = scale(test_set[, 2:3])
## Fitting Muliple Linear Regression to training set
lin_regressor = lm(formula = Salary ~ ., # data = training_set)
data = dataset)
## Fitting Polynormial Regression to training set
dataset$Level2 = dataset$Level ^ 2
dataset$Level3 = dataset$Level ^ 3
pol_regressor = lm(formula = Salary ~ ., # data = training_set)
data = dataset)
## Visualize data
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_regressor, newdata = dataset)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Linear Regression)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(pol_regressor, newdata = dataset)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Polynormia Regression)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(pol_regressor, newdata = dataset)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Polynormia Regression)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
dataset$Level4 = dataset$Level ^ 4
View(dataset)
View(dataset)
pol_regressor = lm(formula = Salary ~ ., # data = training_set)
data = dataset)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(pol_regressor, newdata = dataset)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Polynormia Regression)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
source('~/My Work/ML in R/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 6 - Polynomial Regression/MyWork/polynomial_regression.R', echo=TRUE)
View(predit_data)
View(predit_data)
y_pred = predict(lin_regressor, newdata = predit_data)
print(y_pred)
predit_data$Level2 = predit_data$Level ^ 2
predit_data$Level3 = predit_data$Level ^ 3
predit_data$Level4 = predit_data$Level ^ 4
pol_y_pred = predict(pol_regressor, newdata = predit_data)
lin_y_pred = predict(lin_regressor, newdata = predit_data)
x_grid = sec(min(dataset$Level), max(dataset$Level), 0.1)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
x_grid = data.frame(Level = x_grid)
View(predit_data)
View(predit_data)
View(x_grid)
View(x_grid)
View(predit_data)
View(predit_data)
View(x_grid)
View(x_grid)
View(x_grid)
View(x_grid)
View(x_grid)
View(x_grid)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
x_grid = data.frame(Level = x_grid)
x_grid$Level2 = x_grid$Level ^ 2
x_grid$Level3 = x_grid$Level ^ 3
x_grid$Level4 = x_grid$Level ^ 4
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(pol_regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Polynormia Regression - Smooth)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(pol_regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Polynormia Regression - Smooth)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
x_grid = data.frame(Level = x_grid)
x_grid$Level2 = x_grid$Level ^ 2
x_grid$Level3 = x_grid$Level ^ 3
x_grid$Level4 = x_grid$Level ^ 4
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(pol_regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Polynormia Regression - Smooth)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
x_grid = data.frame(Level = x_grid)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(pol_regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Polynormia Regression - Smooth)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
x_grid$Level2 = x_grid$Level ^ 2
x_grid$Level3 = x_grid$Level ^ 3
x_grid$Level4 = x_grid$Level ^ 4
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(pol_regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Polynormia Regression - Smooth)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level) + 0.1, 0.1)
x_grid = data.frame(Level = x_grid)
x_grid$Level2 = x_grid$Level ^ 2
x_grid$Level3 = x_grid$Level ^ 3
x_grid$Level4 = x_grid$Level ^ 4
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(pol_regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Polynormia Regression - Smooth)') +
xlab(label = 'Level') +
ylab(label = 'Salary'
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(pol_regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Polynormia Regression - Smooth)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(pol_regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Polynormia Regression - Smooth)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
x_grid = data.frame(Level = x_grid)
x_grid$Level2 = x_grid$Level ^ 2
x_grid$Level3 = x_grid$Level ^ 3
x_grid$Level4 = x_grid$Level ^ 4
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(pol_regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Polynormia Regression - Smooth)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
setwd("~/My Work/ML in R/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 7 - Support Vector Regression (SVR)/MyWork")
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
View(dataset)
View(dataset)
install.packages('e1071')
library(e1071)
library(e1071)
regressor = svm(formula = Salary ~ .,
data = dataset,
type = 'eps-regression')
View(regressor)
View(regressor)
predit_data = data.frame(Level = 6.5)
View(predit_data)
View(predit_data)
y_pred = predict(regressor, newdata = predit_data)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
x_grid = data.frame(Level = x_grid)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (SVR)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
setwd("~/My Work/ML in R/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 8 - Decision Tree Regression/MyWork")
dataset = read.csv('Position_Salaries.csv')
View(dataset)
View(dataset)
dataset = dataset[, 2:3]
View(dataset)
View(dataset)
install.packages('rpart')
library(rpart)
library(rpart)
regressor = rpart(formula = Salary ~ ., # data = training_set)
data = dataset)
predit_data = data.frame(Level = 6.5)
y_pred = predict(regressor, newdata = predit_data)
View(predit_data)
View(predit_data)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
x_grid = data.frame(Level = x_grid)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(pol_regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Decision Tree Regression Model)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
x_grid = data.frame(Level = x_grid)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Decision Tree Regression Model)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
regressor = rpart(formula = Salary ~ ., # data = training_set)
data = dataset,
control = rpart.control(minsplit = 1)) # we didnt got splits without this
## Predications
predit_data = data.frame(Level = 6.5)
y_pred = predict(regressor, newdata = predit_data)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
x_grid = data.frame(Level = x_grid)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Decision Tree Regression Model)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
setwd("~/My Work/ML in R/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 9 - Random Forest Regression/MyWork")
install.packages('randomForest')
# install.packages('randomForest')
library(randomForest)
library(randomForest)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
View(dataset)
View(dataset)
test_1 = dataset[1]
test_2 = dataset$Level
View(test_1)
View(test_1)
## Import dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
set.seed(1234)
regressor = randomForest(x = dataset[1], #This gives a data fram
y = dataset$Salary, # y expects vector
ntree = 10)
predit_data = data.frame(Level = 6.5)
y_pred = predict(regressor, newdata = predit_data)
View(predit_data)
View(predit_data)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
x_grid = data.frame(Level = x_grid)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Random Forest Model)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
x_grid = data.frame(Level = x_grid)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Random Forest Model)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
regressor = randomForest(x = dataset[1], #This gives a data fram
y = dataset$Salary, # y expects vector
ntree = 300)
predit_data = data.frame(Level = 6.5)
y_pred = predict(regressor, newdata = predit_data)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
x_grid = data.frame(Level = x_grid)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Random Forest Model)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
regressor = randomForest(x = dataset[1], #This gives a data fram
y = dataset$Salary, # y expects vector
ntree = 3000)
## Predications
predit_data = data.frame(Level = 6.5)
y_pred = predict(regressor, newdata = predit_data)
## Visualize data
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
x_grid = data.frame(Level = x_grid)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Random Forest Model)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
regressor = randomForest(x = dataset[1], #This gives a data fram
y = dataset$Salary, # y expects vector
ntree = 300000)
## Predications
predit_data = data.frame(Level = 6.5)
y_pred = predict(regressor, newdata = predit_data)
## Visualize data
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
x_grid = data.frame(Level = x_grid)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Random Forest Model)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
regressor = randomForest(x = dataset[1], #This gives a data fram
y = dataset$Salary, # y expects vector
ntree = 300)
## Predications
predit_data = data.frame(Level = 6.5)
y_pred = predict(regressor, newdata = predit_data)
## Visualize data
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
x_grid = data.frame(Level = x_grid)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Random Forest Model)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
set.seed(1234)
regressor = randomForest(x = dataset[1], #This gives a data fram
y = dataset$Salary, # y expects vector
ntree = 300)
## Predications
predit_data = data.frame(Level = 6.5)
y_pred = predict(regressor, newdata = predit_data)
## Visualize data
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
x_grid = data.frame(Level = x_grid)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Random Forest Model)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
set.seed(1234)
regressor = randomForest(x = dataset[1], #This gives a data fram
y = dataset$Salary, # y expects vector
ntree = 300)
## Predications
predit_data = data.frame(Level = 6.5)
y_pred = predict(regressor, newdata = predit_data)
## Visualize data
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
x_grid = data.frame(Level = x_grid)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Random Forest Model)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
set.seed(1234)
regressor = randomForest(x = dataset[1], #This gives a data fram
y = dataset$Salary, # y expects vector
ntree = 300)
## Predications
predit_data = data.frame(Level = 6.5)
y_pred = predict(regressor, newdata = predit_data)
## Visualize data
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
x_grid = data.frame(Level = x_grid)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Random Forest Model)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
regressor = randomForest(x = dataset[1], #This gives a data fram
y = dataset$Salary, # y expects vector
ntree = 500)
## Predications
predit_data = data.frame(Level = 6.5)
y_pred = predict(regressor, newdata = predit_data)
## Visualize data
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
x_grid = data.frame(Level = x_grid)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Random Forest Model)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
set.seed(1234)
regressor = randomForest(x = dataset[1], #This gives a data fram
y = dataset$Salary, # y expects vector
ntree = 500)
## Predications
predit_data = data.frame(Level = 6.5)
y_pred = predict(regressor, newdata = predit_data)
## Visualize data
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
x_grid = data.frame(Level = x_grid)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid$Level, y = predict(regressor, newdata = x_grid)), colour = 'blue') +
ggtitle(label = 'Truth or Bluff (Random Forest Model)') +
xlab(label = 'Level') +
ylab(label = 'Salary')
library(NbClust)
> nb_clust <- NbClust(x,
+               min.nc = 2,
+               max.nc = 15,
+               method = "kmeans")
library(NbClust)
nb_clust <- NbClust(x, min.nc = 2, max.nc = 15,method = "kmeans")
library(NbClust)
nb_clust <- NbClust(x_grid, min.nc = 2, max.nc = 15,method = "kmeans")
